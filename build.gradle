plugins {
  id 'java'
  id 'application'
  id 'maven-publish'
  id 'org.jetbrains.kotlin.jvm' version '1.9.20'
  id 'org.jmailen.kotlinter' version "4.0.0"
  id 'com.github.gmazzo.buildconfig' version '4.1.2'
  id "com.github.ben-manes.versions" version '0.49.0'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId = 'com.github.pambrose.srcref'
      artifactId = 'srcref'
      version = '1.2.0'

      from components.java
    }
  }
}

group = 'com.github.pambrose.srcref'
// Change version in Makefile and README.md as well
version = '1.2.0'

buildConfig {
  buildConfigField('String', 'NAME', "\"${project.name}\"")
  buildConfigField('String', 'VERSION', "\"${project.version}\"")
  buildConfigField('String', 'RELEASE_DATE', "\"11/01/2023\"")
}

def mainName = "com.pambrose.srcref.Main"

application {
  mainClassName = mainName
}

repositories {
  google()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

dependencies {
  implementation "io.ktor:ktor-server:$ktor_version"
  implementation "io.ktor:ktor-server-cio:$ktor_version"
  implementation "io.ktor:ktor-server-html-builder:$ktor_version"

  implementation "io.ktor:ktor-client-core:$ktor_version"
  implementation "io.ktor:ktor-client-cio:$ktor_version"

  implementation "org.jetbrains.kotlin-wrappers:kotlin-css:$css_version"

  implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
  implementation "com.github.pambrose.common-utils:ktor-server-utils:$utils_version"

  implementation "org.apache.commons:commons-text:$text_version"

  implementation "ch.qos.logback:logback-classic:$logback_version"
  implementation "io.github.microutils:kotlin-logging:$logging_version"

  testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams = true
  }
}

task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
  zip64 true
  mergeServiceFiles()
  exclude "META-INF/*.SF"
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  exclude "LICENSE*"
}

task uberjar(type: Jar, dependsOn: shadowJar) {
  zip64 true
  archiveFileName = 'srcref.jar'
  manifest {
    attributes('Implementation-Title': 'srcref')
    attributes('Implementation-Version': version)
    attributes('Built-Date': new Date())
    attributes('Built-JDK': System.getProperty('java.version'))
    attributes('Main-Class': mainName)
  }
  from zipTree(shadowJar.archiveFile)
}

task sourcesJar(type: Jar, dependsOn: classes) {
  from sourceSets.main.allSource
  archiveClassifier = 'sources'
}

kotlin {
  jvmToolchain(17)
}

compileKotlin {
  kotlinOptions.freeCompilerArgs += ['-Xbackend-threads=8',
                                     '-opt-in=kotlin.time.ExperimentalTime',
                                     '-opt-in=kotlinx.coroutines.DelicateCoroutinesApi',
  ]
}

compileTestKotlin {
  kotlinOptions.freeCompilerArgs += ['-Xbackend-threads=8']
}

kotlinter {
  ignoreFailures = false
  reporters = ['checkstyle', 'plain']
}
