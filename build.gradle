plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    alias(libs.plugins.kotlin)
    alias(libs.plugins.kotlinter)
    alias(libs.plugins.buildconfig)
    alias(libs.plugins.versions)
    alias(libs.plugins.shadow)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.github.pambrose.srcref'
            artifactId = 'srcref'
            version = '1.9.7'

            from components.java
        }
    }
}

group = 'com.github.pambrose.srcref'
// Change version in Makefile and README.md as well
version = '1.9.7'

buildConfig {
    buildConfigField('String', 'NAME', "\"${project.name}\"")
    buildConfigField('String', 'VERSION', "\"${project.version}\"")
    buildConfigField('String', 'RELEASE_DATE', "\"04/22/2025\"")
    buildConfigField("long", "BUILD_TIME", "${System.currentTimeMillis()}L")
}

def mainName = "com.pambrose.srcref.Main"

application {
    mainClassName = mainName
}

repositories {
    google()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    implementation(libs.kotlin.coroutines)

    implementation(libs.ktor.server.core)
    implementation(libs.ktor.server.cio)
    implementation(libs.ktor.server.html)

    implementation(libs.ktor.client.core)
    implementation(libs.ktor.client.cio)

    implementation(libs.kotlin.css)

    implementation(libs.utils.core)
    implementation(libs.utils.ktor.server)

    implementation(libs.dropwizard.core)
    implementation(libs.dropwizard.jvm)

    implementation(libs.commons.text)

    implementation(libs.logback)
    implementation(libs.kotlin.logging)

    testImplementation(libs.kotest)
}

kotlin {
    jvmToolchain(17)
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-opt-in=kotlin.time.ExperimentalTime',
                             '-opt-in=kotlinx.coroutines.DelicateCoroutinesApi',
                             "-opt-in=kotlin.concurrent.atomics.ExperimentalAtomicApi"
        ]
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
    zip64 true
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "LICENSE*"
}

task uberjar(type: Jar, dependsOn: shadowJar) {
    zip64 true
    archiveFileName = 'srcref.jar'
    manifest {
        attributes('Implementation-Title': 'srcref')
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

kotlinter {
    reporters = ['checkstyle', 'plain']
}
